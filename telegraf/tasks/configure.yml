---
# description: Configure telegraf and get all relevent ec2 information

- name: Retrieve ec2 facts
  ec2_facts:
  when: telegraf_agent_aws_tags

- name: Retrieve all ec2 tags on the instance
  ec2_tag:
    region: '{{ ansible_ec2_placement_region }}'
    resource: '{{ ansible_ec2_instance_id }}'
    state: list
  when: telegraf_agent_aws_tags
  register: ec2_tags

- name: "Copy the template for versions < 0.10.0"
  template:
    src: etc-opt-telegraf-telegraf.conf.j2
    dest: /etc/opt/telegraf/telegraf.conf
    owner: telegraf
    group: telegraf
    mode: 0640
  become: yes
  when: telegraf_agent_version is version_compare('0.10.0', '<')
  notify: "Restart Telegraf"

- name: "Copy the template for versions >= 0.10.0"
  template:
    src: telegraf.conf.j2
    dest: /etc/telegraf/telegraf.conf
    owner: telegraf
    group: telegraf
    mode: 0640
  become: yes
  when: telegraf_agent_version is version_compare('0.10.0', '>=')
  notify: "Restart Telegraf"

- name: "Check if extra plugins directory exists in case of exclusive"
  action: stat path=/etc/telegraf/telegraf.d
  register: telegraf_directory
  when: telegraf_plugins_extra_exclusive

- name: "Delete telegraf extra plugin path"
  file:
    state: absent
    path: "/etc/telegraf/telegraf.d/"
  when: telegraf_plugins_extra_exclusive and telegraf_directory.stat.exists
  become: yes
  notify: "Restart Telegraf"

- name: "Create telegraf extra plugin path"
  file:
    state: directory
    path: "/etc/telegraf/telegraf.d/"
    owner: telegraf
    group: telegraf
    mode: 0740
  when: telegraf_plugins_extra_exclusive and telegraf_directory.stat.exists
  become: yes
  notify: "Restart Telegraf"

- name: "Copy telegraf extra plugins"
  template:
    src: "telegraf-extra-plugin.conf.j2"
    dest: "/etc/telegraf/telegraf.d/{{ item.key }}.conf"
    owner: telegraf
    group: telegraf
    mode: 0640
  with_dict: "{{ telegraf_plugins_extra }}"
  when: "telegraf_plugins_extra is defined and telegraf_plugins_extra is iterable and item.value.state|default('present') != 'absent'"
  become: yes
  notify: "Restart Telegraf"

- name: "Remove telegraf extra plugins"
  file:
    path: "/etc/telegraf/telegraf.d/{{ item.key }}.conf"
    state: absent
  with_dict: "{{ telegraf_plugins_extra }}"
  when: "telegraf_plugins_extra is defined and telegraf_plugins_extra is iterable and item.value.state|default('present') == 'absent'"
  become: yes
  notify: "Restart Telegraf"

- name: "Force restart service after reread config"
  meta: flush_handlers
